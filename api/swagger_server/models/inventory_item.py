# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InventoryItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, userid: str=None, sn: str=None, name: str=None):  # noqa: E501
        """InventoryItem - a model defined in Swagger

        :param userid: The userid of this InventoryItem.  # noqa: E501
        :type userid: str
        :param sn: The sn of this InventoryItem.  # noqa: E501
        :type sn: str
        :param name: The name of this InventoryItem.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'userid': str,
            'sn': str,
            'name': str
        }

        self.attribute_map = {
            'userid': 'userid',
            'sn': 'sn',
            'name': 'name'
        }

        self._userid = userid
        self._sn = sn
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'InventoryItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InventoryItem of this InventoryItem.  # noqa: E501
        :rtype: InventoryItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def userid(self) -> str:
        """Gets the userid of this InventoryItem.


        :return: The userid of this InventoryItem.
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid: str):
        """Sets the userid of this InventoryItem.


        :param userid: The userid of this InventoryItem.
        :type userid: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def sn(self) -> str:
        """Gets the sn of this InventoryItem.


        :return: The sn of this InventoryItem.
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn: str):
        """Sets the sn of this InventoryItem.


        :param sn: The sn of this InventoryItem.
        :type sn: str
        """
        if sn is None:
            raise ValueError("Invalid value for `sn`, must not be `None`")  # noqa: E501

        self._sn = sn

    @property
    def name(self) -> str:
        """Gets the name of this InventoryItem.


        :return: The name of this InventoryItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this InventoryItem.


        :param name: The name of this InventoryItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
